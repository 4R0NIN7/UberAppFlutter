// Mocks generated by Mockito 5.2.0 from annotations
// in uber_app_flutter/test/controllers/scanner_controller_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;
import 'dart:typed_data' as _i4;

import 'package:either_dart/src/either.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:reactive_ble_platform_interface/reactive_ble_platform_interface.dart'
    as _i2;
import 'package:uber_app_flutter/src/core/failure/failure.dart' as _i6;
import 'package:uber_app_flutter/src/domain/usecases/scan_devices_usecase.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDiscoveredDevice_0 extends _i1.Fake implements _i2.DiscoveredDevice {
}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [DiscoveredDevice].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockDiscoveredDevice extends _i1.Mock implements _i2.DiscoveredDevice {
  MockDiscoveredDevice() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  Map<_i2.Uuid, _i4.Uint8List> get serviceData =>
      (super.noSuchMethod(Invocation.getter(#serviceData),
              returnValue: <_i2.Uuid, _i4.Uint8List>{})
          as Map<_i2.Uuid, _i4.Uint8List>);
  @override
  List<_i2.Uuid> get serviceUuids =>
      (super.noSuchMethod(Invocation.getter(#serviceUuids),
          returnValue: <_i2.Uuid>[]) as List<_i2.Uuid>);
  @override
  _i4.Uint8List get manufacturerData =>
      (super.noSuchMethod(Invocation.getter(#manufacturerData),
          returnValue: _i4.Uint8List(0)) as _i4.Uint8List);
  @override
  int get rssi =>
      (super.noSuchMethod(Invocation.getter(#rssi), returnValue: 0) as int);
  @override
  _i2.DiscoveredDevice copyWith(
          {String? id,
          String? name,
          Map<_i2.Uuid, _i4.Uint8List>? serviceData,
          List<_i2.Uuid>? serviceUuids,
          _i4.Uint8List? manufacturerData,
          int? rssi}) =>
      (super.noSuchMethod(
          Invocation.method(#copyWith, [], {
            #id: id,
            #name: name,
            #serviceData: serviceData,
            #serviceUuids: serviceUuids,
            #manufacturerData: manufacturerData,
            #rssi: rssi
          }),
          returnValue: _FakeDiscoveredDevice_0()) as _i2.DiscoveredDevice);
  @override
  _i2.DiscoveredDevice copyUsing(
          void Function(_i2.DiscoveredDevice$Change)? mutator) =>
      (super.noSuchMethod(Invocation.method(#copyUsing, [mutator]),
          returnValue: _FakeDiscoveredDevice_0()) as _i2.DiscoveredDevice);
}

/// A class which mocks [StartScanningDevicesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockStartScanningDevicesUseCase extends _i1.Mock
    implements _i5.StartScanningDevicesUseCase {
  MockStartScanningDevicesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Either<_i6.Failure, _i7.Stream<_i2.DiscoveredDevice>> invoke(
          {void params}) =>
      (super.noSuchMethod(Invocation.method(#invoke, []),
              returnValue: _FakeEither_1<_i6.Failure,
                  _i7.Stream<_i2.DiscoveredDevice>>())
          as _i3.Either<_i6.Failure, _i7.Stream<_i2.DiscoveredDevice>>);
}
